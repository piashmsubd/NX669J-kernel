name: Build NX669J Kernel

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04  # Ubuntu 20.04 ব্যবহার

    steps:
      # ১. রিপোজিটরি চেকআউট (v4)
      - name: Checkout Repository
        uses: actions/checkout@v3

      # ২. বিল্ড পরিবেশ সেটআপ
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y git bc bison flex libssl-dev libelf-dev gcc-aarch64-linux-gnu make python2
          sudo ln -sf /usr/bin/python2 /usr/bin/python  # python2 এর জন্য symlink
          
      # ৩. videodev2.h ফাইলে time.h ইনক্লুড করা (আগের এরর ফিক্স)
      - name: Fix videodev2.h Header
        run: |
          sed -i '1i #include <linux/time.h>' usr/include/linux/videodev2.h || true
        working-directory: ./msm-5.4

      # ৪. কার্নেল কনফিগারেশন
      - name: Configure Kernel
        run: |
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- vendor/lahaina-NX669J_diff
        working-directory: ./msm-5.4

      # ৫. কার্নেল বিল্ড
      - name: Build Kernel
        run: |
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)
        working-directory: ./msm-5.4

      # ৬. বিল্ড আউটপুট আপলোড
      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: NX669J-Kernel-Image
          path: msm-5.4/arch/arm64/boot/Image

      # ৭. রিলিজ তৈরি (ঐচ্ছিক)
      - name: Create Release
        if: success()  # শুধুমাত্র সফল হলে রিলিজ করবে
        uses: ncipollo/release-action@v1
        with:
          artifacts: "msm-5.4/arch/arm64/boot/Image"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "kernel-v${{ github.run_number }}"
          name: "NX669J Kernel Build #${{ github.run_number }}"
